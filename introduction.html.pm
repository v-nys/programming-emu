#lang pollen
◊h1{Introduction}
I'm a poor ◊link{Racket} programmer. I can probably write code which accomplishes an end-to-end task, but it may be orders of magnitude larger than it needs to be. I can figure out what I need to do at compile time and what I need to do at runtime, but only through trial and error. I only have one moderately large Racket codebase and I'm too embarrassed to point you to it. Those are the facts, so what to do?

It's well established that acquiring a skill requires ◊link{deliberate practice}. If you want to learn how to do something general (like writing decent Racket code), it's important to have specific goals, to make a conscious effort to learn from mistakes and to seek out feedback. Enter ◊work{Programming Emu}, a project-based book in which I try to reverse engineer interesting Racket projects.

My hope is that, by carefully studying the code of experienced Racketeers, I'll be able to pick up new techniques and better programming habits. Writing a book about the process helps me stay focused on a particular project, it forces me to formulate my findings clearly and it leaves a record for myself and others. Reverse engineering should serve as proof that I have sufficiently grasped the original code base.

Each chapter will deal with a single project and the chapters will be more or less sorted based on the difficulty of the examined codebase. We'll dive into logic programming with ◊work{Parenlog}. ◊todo{We'll look at the goto blogging system for Racket, ◊work{Frog}. We'll delve into games with ◊work{Get Bonus}. We'll deconstruct and reconstruct parts of the Racket standard library. We'll do more stuff, but I haven't decided on what that will be yet.}

The code for this books is on ◊link{Github} and I welcome bug reports, requests to discuss specific projects or pull requests. I also welcome guest chapters, though I'd appreciate it if you could give me an early heads-up. Just in case I'm working on something similar. Also, don't be reluctant to contribute if you're not particularly experienced. After all, my own lack of experience is the whole reason I'm currently writing this.