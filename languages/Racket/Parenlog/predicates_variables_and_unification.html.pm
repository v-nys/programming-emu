#lang pollen
‚óätitle[metas]{Variables, predicates and unification}
Our first step will be to implement a crucial mechanism known as ‚óäglossaryterm[#:explanation "mechanism by which a unifier for two terms is found"]{unification}, which operates on terms. But to understand and implement unification, we need to understand logic variables.
‚óäh3{Logic variables vs. Racket variables}
Variables in a logic programming language are different from variables in Racket (and most languages). They are more like unknowns in mathematics: they represent one, immutable value, but that value may not yet be known where the variable is used. Consider again our theory from before: ‚óälisting[#:source"code/theory.pl" #:lang "prolog"]

In Prolog, we could write the query ‚óäcode{likes(X,math)} and learn that the query is successful for ‚óäcode{X} equal to ‚óäcode{eratosthenes}, but we could not write a query like ‚óäcode{likes(X,math), X = ares}. Or rather, we could, but Prolog will not yield a single answer. ‚óäcode{likes(X,math)} will assign ‚óäcode{eratosthenes}, ‚óäcode{pythagoras} or ‚óäcode{athena} to ‚óäcode{X}. Once a value has been assigned to a variable, it cannot be changed until after Prolog has produced an answer or has failed to do so. When an answer is produced or a computation reaches a dead end, backtracking occurs. That is, the most recently applied rule (or fact) with remaining untried alternatives is undone and is replaced with the first of these alternatives.

With that in mind, we can ‚óäglossaryterm[#:explanation "to associate a variable with the value"]{bind} logic variables using an immutable hash table, i.e. associate names with values. The keys will be variable symbols (e.g. ‚óäcode{'X} or ‚óäcode{'PrologVar}) and the values will be terms. This mapping from variables to their assigned values is typically called a ‚óäglossaryterm[#:explanation "a mapping from symbols to values, used to track the bindings of variables"]{binding environment} or just "environment" for short.‚óäaside{In logic programming circles, it's common to talk about a substitution, which is a somewhat more general concept, but the focus here is on implementing a working version of Parenlog.} The impossibility of reassigning variables is easy to implement: only allow updating the binding environment if the variable is unbound, or if the assignment is compatible with previous assignments to that variable. So, ‚óäcode{=} can do assignment only if the left-hand side is unbound? No, because ‚óäcode{=} is not assignment, but explicit ‚óäglossaryref{unification}. What's the difference? Here's an example: ‚óäcode{chews(X,bone) = chews(misty,Y).} will succeed in Prolog and will bind ‚óäcode{X} to ‚óäcode{misty} and ‚óäcode{Y} to ‚óäcode{bone}. More generally, unification finds a ‚óäglossaryterm[#:explanation "a substitution which makes two terms syntactically equal"]{unifier}, i.e. a substitution which causes two terms to become syntactically equal. And we are really only interested in the ‚óäglossaryterm[#:explanation "a unifier for two terms such that all other unifiers for these terms can be obtained by composing another unifier with it"]{most general unifier}, which is a substitution which does not instantiate any variables further than required. For instance, ‚óäcode{greek(X)} and ‚óäcode{greek(Y)} can be made equal by binding ‚óäcode{X} to ‚óäcode{Y}. They can also be made equal by binding ‚óäcode{X} to ‚óäcode{ares} and ‚óäcode{Y} to ‚óäcode{ares}, but that's more specific than what is required, so that doesn't happen when we unify ‚óäcode{greek(X)} and ‚óäcode{greek(Y)}.
‚óäaside{Unification is a bidirectional form of pattern matching. Or, according to logic programmers, pattern matching is one-way unification.}

Unification of two S-expressions is a good way to get our feet wet, as it can be written without resorting to any auxiliary functions and is, in turn, used in a lot of the rest of the code. The standard algorithm for finding a most general unifier is known as the ‚óäglossaryterm[#:explanation "a fast algorithm for unification"]{Martelli-Montanari algorithm} and, fortunately, it makes a lot of sense. An adequate explanation is provided on ‚óäa[#:href "https://en.wikipedia.org/wiki/Unification_(computer_science)#A_unification_algorithm"]{Wikipedia} so I won't come up with my own formulation. However, the version on Wikipedia includes the "occurs check" as the last step. You can leave that one out. Historically, it's pretty much always been omitted from Prolog implementations because it is computationally expensive and not very useful in practice. Some Prolog implementations do give you the option of using it, though.

Let's implement the Martelli-Montanari algorithm. We'll use it to unify logic programming terms (i.e. atoms, variables or compounds). We'll represent atoms as symbols starting with a lower case letter, variables as symbols starting with an upper case letter and compounds as lists whose first element is a symbol. Here's a suggested function signature for a ‚óäcode{unify} function: ‚óäcode{S-expression -> S-expression -> environment -> (or/c environment #f)}. So: take two S-expressions and an existing environment as input and update the environment if unification is possible or represent failure to unify with ‚óäcode{#f}. Instead of trying to implement each step in the explanation on Wikipedia very literally, examine the various cases and look at how they affect the binding environment. Don't worry about replacing nested variables with their assigned terms (as in the "eliminate" step). It's not necessary if you can examine the environment to see if a variable is already bound, which is easy with a hash table.

And here are some tests for this function. I would advise you to read these first, as they can clarify some of the expected behavior. There's one case in which shared variables occur on the left-hand side and on the right-hand side. That's something we'll typically avoid, but it still makes for a useful test case.
‚óäaside{If you're not familiar with the ‚óäcode{(module+ test ...)} approach to testing in Racket, have a look ‚óäa[#:href "https://docs.racket-lang.org/guide/Module_Syntax.html"]{here} and do a search for ‚óäcode{module+ test}.}
‚óälisting[#:source "code/unify-tests.rkt" #:fn "core.rkt"]

Using the description of the Martelli-Montanari algorithm, try to come up with code that gets those tests to pass. If you get stuck, have a look at the code below, focus on understanding and remembering the general structure, then try again from memory.

Here's my code, juxtaposed with Jay's. I should point out that this was written after I had studied his code, so both snippets look very similar.

‚óäcode-discussion[
‚óälisting[#:source "code/unify.rkt" #:fn "core.rkt"#:highlights '((11 3) (11 9))]{I used ‚óäcode{match*} because it fits the algorithm provided on Wikipedia, but I'm really not looking at term structure anywhere. You can just as easily use ‚óäcode{cond}.}
‚óälisting[#:source "code/unify.rkt" #:fn "core.rkt" #:highlights '((24 5) (24 39))]{This is something to watch out for. A bound variable can be bound to another bound variable, so we dereference and unify recursively.}
‚óälisting[#:source "code/unify-jay.rkt" #:fn "core.rkt" #:highlights '((10 9) (10 24))]{You don't really need this, you can just rely on the other two predicates.}]

‚óäexercise{Modify your own code to incorporate any improvements that you see.} ‚óäexercise{Notify me if you notice any bugs in my code üòÅ}

Our next stop is the mechanism which allows Prolog to reason in multiple directions: resolution!
